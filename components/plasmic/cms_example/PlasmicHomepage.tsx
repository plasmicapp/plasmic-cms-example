// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bY35SmJJgVeJtcuAReMtgz
// Component: -Uehc9Mv8w9P
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import { CmsRowField } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: w6HdOz-Pcn/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cms_example.module.css"; // plasmic-import: bY35SmJJgVeJtcuAReMtgz/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: -Uehc9Mv8w9P/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  text?: p.Flex<"div">;
  cmsDataLoader?: p.Flex<typeof CmsQueryRepeater>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  cmsEntryField?: p.Flex<typeof CmsRowField>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            sty.root
          )}
        >
          <ph.DataCtxReader>
            {$ctx => (
              <>
                {true ? (
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <ph.DataCtxReader>
                      {$ctx => (
                        <>
                          <h2
                            data-plasmic-name={"h2"}
                            data-plasmic-override={overrides.h2}
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2
                            )}
                          >
                            {"Products"}
                          </h2>

                          <div
                            data-plasmic-name={"text"}
                            data-plasmic-override={overrides.text}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text
                            )}
                          >
                            {
                              "The products listed below are coming from Plasmic CMS."
                            }
                          </div>

                          <CmsQueryRepeater
                            data-plasmic-name={"cmsDataLoader"}
                            data-plasmic-override={overrides.cmsDataLoader}
                            className={classNames(
                              "__wab_instance",
                              sty.cmsDataLoader
                            )}
                            desc={false}
                            limit={0 as const}
                            table={"products" as const}
                            useDraft={false}
                          >
                            <ph.DataCtxReader>
                              {$ctx => (
                                <>
                                  <p.PlasmicLink
                                    data-plasmic-name={"link"}
                                    data-plasmic-override={overrides.link}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      sty.link
                                    )}
                                    component={Link}
                                    href={`/products/${$ctx.__plasmic_cms_row_products.data.slug}`}
                                    platform={"nextjs"}
                                  >
                                    <CmsRowField
                                      data-plasmic-name={"cmsEntryField"}
                                      data-plasmic-override={
                                        overrides.cmsEntryField
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cmsEntryField
                                      )}
                                    />
                                  </p.PlasmicLink>
                                </>
                              )}
                            </ph.DataCtxReader>
                          </CmsQueryRepeater>
                        </>
                      )}
                    </ph.DataCtxReader>
                  </div>
                ) : null}
              </>
            )}
          </ph.DataCtxReader>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "h2",
    "text",
    "cmsDataLoader",
    "link",
    "cmsEntryField"
  ],
  freeBox: ["freeBox", "h2", "text", "cmsDataLoader", "link", "cmsEntryField"],
  h2: ["h2"],
  text: ["text"],
  cmsDataLoader: ["cmsDataLoader", "link", "cmsEntryField"],
  link: ["link", "cmsEntryField"],
  cmsEntryField: ["cmsEntryField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  h2: "h2";
  text: "div";
  cmsDataLoader: typeof CmsQueryRepeater;
  link: "a";
  cmsEntryField: typeof CmsRowField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHomepage__VariantsArgs;
  args?: PlasmicHomepage__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h2: makeNodeComponent("h2"),
    text: makeNodeComponent("text"),
    cmsDataLoader: makeNodeComponent("cmsDataLoader"),
    link: makeNodeComponent("link"),
    cmsEntryField: makeNodeComponent("cmsEntryField"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
